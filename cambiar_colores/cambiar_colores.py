import tkinter as tk
import random


def cambiar_color_rgb(ventana, etiqueta):
    """Cambia el fondo a un color predefinido RGB y actualiza la etiqueta."""
    colores = ["red", "green", "blue", "yellow", "purple", "orange"]
    color_aleatorio = random.choice(colores)
    ventana.config(bg=color_aleatorio)
    etiqueta.config(text=f"Color RGB: {color_aleatorio}")


def cambiar_color_hex(ventana, etiqueta):
    """Cambia el fondo a un color aleatorio en formato hexadecimal y actualiza la etiqueta."""
    color_aleatorio = "#{:06x}".format(random.randint(0, 0xFFFFFF))
    ventana.config(bg=color_aleatorio)
    etiqueta.config(text=f"Color Hexadecimal: {color_aleatorio}")


def crear_ventana():
    ventana = tk.Tk()
    ventana.title("Mi primera ventana")
    ventana.geometry("400x300")
    ventana.config(bg="lightgray")  # Color de fondo inicial

    # Widgets
    etiqueta_rgb = tk.Label(ventana, text="Color RGB:", font=("Arial", 12, "bold"))
    etiqueta_rgb.pack(pady=10)

    etiqueta_hex = tk.Label(ventana, text="Color Hexadecimal:", font=("Arial", 12, "bold"))
    etiqueta_hex.pack(pady=10)

    boton_rgb = tk.Button(
        ventana,
        text="Cambiar Color Fondo RGB",
        command=lambda: cambiar_color_rgb(ventana, etiqueta_rgb)
    )
    boton_rgb.pack(pady=10)

    boton_hex = tk.Button(
        ventana,
        text="Cambiar Color Fondo Hexadecimal",
        command=lambda: cambiar_color_hex(ventana, etiqueta_hex)
    )
    boton_hex.pack(pady=10)

    return ventana


if __name__ == "__main__":
    app = crear_ventana()
    app.mainloop()



'''
¬øPor qu√© en el anterior c√≥digo el command se le pasa una lambda si ya hemos definido una funci√≥n para poder ser llamada?

La diferencia est√° en c√≥mo se pasan los argumentos al command en tkinter.

1. Cuando la funci√≥n NO necesita par√°metros

Puedes pasar la referencia de la funci√≥n directamente, sin par√©ntesis:

boton = tk.Button(ventana, text="Haz clic", command=mi_funcion)

‚ö†Ô∏è Importante: si escribes command=mi_funcion(), la funci√≥n se ejecuta en ese mismo momento y no cuando pulses el bot√≥n.

2. Cuando la funci√≥n S√ç necesita par√°metros

command no acepta directamente funciones con argumentos. Por eso usamos lambda o functools.partial.

Ejemplo con lambda:

boton = tk.Button(
    ventana,
    text="Cambiar color",
    command=lambda: cambiar_color_rgb(ventana, etiqueta)
)

Aqu√≠, lambda crea una funci√≥n an√≥nima sin par√°metros que, al ejecutarse, llama a cambiar_color_rgb(ventana, etiqueta).
Es como un ‚Äúpuente‚Äù para pasar argumentos.

3. En la versi√≥n con clase

Como las funciones (self.cambiar_color_rgb) ya tienen acceso a los atributos (self.root, self.etiqueta_rgb), no necesitan argumentos externos ‚Üí entonces ya no hace falta lambda:

self.boton_rgb = tk.Button(
    self.root,
    text="Cambiar Color Fondo RGB",
    command=self.cambiar_color_rgb  # sin lambda, directo
)
üîë Resumiendo:

Si la funci√≥n no requiere par√°metros ‚Üí command=mi_funcion.

Si requiere par√°metros ‚Üí command=lambda: mi_funcion(arg1, arg2).

En una clase muchas veces basta con command=self.mi_metodo, porque los atributos (self.etiqueta_rgb, etc.) ya est√°n dentro del objeto.

'''